{"version":3,"sources":["components/styles/StyledTetris.js","gameHelpers.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledStartButton.js","components/StartButton.js","hooks/useInterval.js","hooks/useStage.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","App.js","index.js"],"names":["StyledTetrisWrapper","styled","div","StyledTetris","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","position","StyledDisplay","props","gameOver","Display","text","StyledCell","color","type","TETROMINOS","shape","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","Cell","memo","StyledStage","height","width","Stage","map","row","cell","index","StyledStartButton","button","StartButton","callback","onClick","useInterval","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","updateStage","previousStage","newStage","forEach","value","collided","reduce","accumulator","findIndex","previousState","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","direction","rotatedTetromino","_","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","offset","usePlayer","updatePlayerPosition","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","useMemo","calculateScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","yPosition","hardDrop","role","tabIndex","onKeyDown","event","onKeyUp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14820051.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(/assets/space.jpg) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y++) {\r\n    for (let x = 0; x < player.tetromino[y].length; x++) {\r\n      // 1. Check that we're on an actual tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check the move if it is inside the game area's height (y)\r\n          // It should not go to through the bottom of the play area.\r\n          !stage[y + player.position.y + moveY] ||\r\n          // 3. Check the move if it is inside the game area's width (x)\r\n          !stage[y + player.position.y + moveY][\r\n            x + player.position.x + moveX\r\n          ] ||\r\n          // 4. Check the cell that we are moving to is not set to 'clear'\r\n          stage[y + player.position.y + moveY][\r\n            x + player.position.x + moveX\r\n          ][1] !== 'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-size: 0.8rem;\r\n`;\r\n","import { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => {\r\n  return <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>;\r\n};\r\n\r\nexport default Display;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.1);\r\n`;\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n      [0, 'I', 0, 0],\r\n    ],\r\n    color: '80, 227, 230',\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, 'J', 0],\r\n      [0, 'J', 0],\r\n      ['J', 'J', 0],\r\n    ],\r\n    color: '36, 95, 223',\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, 'L', 0],\r\n      [0, 'L', 0],\r\n      [0, 'L', 'L'],\r\n    ],\r\n    color: '223, 173, 36',\r\n  },\r\n  O: {\r\n    shape: [\r\n      ['0', '0'],\r\n      ['0', '0'],\r\n    ],\r\n    color: '223, 217, 36',\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, 'S', 'S'],\r\n      ['S', 'S', 0],\r\n      [0, 0, 0],\r\n    ],\r\n    color: '48, 211, 56',\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      ['T', 'T', 'T'],\r\n      [0, 'T', 0],\r\n    ],\r\n    color: '132, 61, 198',\r\n  },\r\n  Z: {\r\n    shape: [\r\n      ['Z', 'Z', 0],\r\n      [0, 'Z', 'Z'],\r\n      [0, 0, 0],\r\n    ],\r\n    color: '227, 78, 78',\r\n  },\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = 'IJLOSTZ';\r\n  const randTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n  return TETROMINOS[randTetromino];\r\n};\r\n","import { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\nimport { memo } from 'react';\r\n\r\nconst Cell = ({ type }) => {\r\n  return <StyledCell type={type} color={TETROMINOS[type].color} />;\r\n};\r\n\r\nexport default memo(Cell);\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import Cell from './Cell';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nconst Stage = ({ stage }) => {\r\n  return (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n      {stage.map(row =>\r\n        row.map((cell, index) => <Cell key={index} type={cell[0]} />)\r\n      )}\r\n    </StyledStage>\r\n  );\r\n};\r\n\r\nexport default Stage;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-size: 1rem;\r\n`;\r\n","import { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => {\r\n  return <StyledStartButton onClick={callback}>Start Game</StyledStartButton>;\r\n};\r\n\r\nexport default StartButton;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n};\r\n\r\nexport default useInterval;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((accumulator, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(previousState => previousState + 1);\r\n          accumulator.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return accumulator;\r\n        }\r\n\r\n        accumulator.push(row);\r\n        return accumulator;\r\n      }, []);\r\n\r\n    const updateStage = previousStage => {\r\n      // 1. Flush the stage\r\n      const newStage = previousStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // 2. Draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.position.y][x + player.position.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n\r\n      // Check tetrimino for collision\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage(previousStage => updateStage(previousStage));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import { StyledTetris, StyledTetrisWrapper } from './styles/StyledTetris';\r\nimport { checkCollision, createStage } from '../gameHelpers';\r\n\r\nimport Display from './Display';\r\nimport Stage from './Stage';\r\nimport StartButton from './StartButton';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport useInterval from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useState } from 'react';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPosition, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] =\r\n    useGameStatus(rowsCleared);\r\n\r\n  console.log('re-render');\r\n\r\n  const movePlayer = direction => {\r\n    if (!checkCollision(player, stage, { x: direction, y: 0 })) {\r\n      updatePlayerPosition({ x: direction, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(previousState => previousState + 1);\r\n      // Increase speed also\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPosition({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game Over\r\n      if (player.position.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPosition({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  };\r\n\r\n  const hardDrop = () => {\r\n    let yPosition = 0;\r\n    while (!checkCollision(player, stage, { x: 0, y: yPosition })) {\r\n      yPosition += 1;\r\n    }\r\n\r\n    updatePlayerPosition({ x: 0, y: yPosition - 1, collided: true });\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      switch (keyCode) {\r\n        // Spacebar key\r\n        case 32:\r\n          hardDrop();\r\n          break;\r\n        // Left arrow key\r\n        case 37:\r\n          movePlayer(-1);\r\n          break;\r\n        // Up arrow key\r\n        case 38:\r\n          playerRotate(stage, 1);\r\n          break;\r\n        // Right arrow key\r\n        case 39:\r\n          movePlayer(1);\r\n          break;\r\n        // Down arrow key\r\n        case 40:\r\n          dropPlayer();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={event => move(event)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver && <Display gameOver={gameOver} text=\"Game Over\" />}\r\n          {!gameOver && (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { useCallback, useState } from 'react';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    position: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, direction) => {\r\n    // Make rows to columns (transpose)\r\n    const rotatedTetromino = matrix.map((_, index) =>\r\n      matrix.map(col => col[index])\r\n    );\r\n\r\n    // Reverse each row to get a rotated matrix\r\n    if (direction > 0) {\r\n      return rotatedTetromino.map(row => row.reverse());\r\n    } else {\r\n      return rotatedTetromino.reverse();\r\n    }\r\n  };\r\n\r\n  const playerRotate = (stage, direction) => {\r\n    // const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    const clonedPlayer = { ...player };\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\r\n\r\n    const position = clonedPlayer.position.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.position.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -direction);\r\n        clonedPlayer.position.x = position;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPosition = ({ x, y, collided }) => {\r\n    setPlayer(previousState => ({\r\n      ...previousState,\r\n      position: {\r\n        x: (previousState.position.x += x),\r\n        y: (previousState.position.y += y),\r\n      },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPosition, resetPlayer, playerRotate];\r\n};\r\n","import { useCallback, useEffect, useMemo, useState } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  let linePoints = useMemo(() => {}, []);\r\n  linePoints = [40, 100, 300, 1200];\r\n\r\n  const calculateScore = useCallback(() => {\r\n    // Check if we have score\r\n    if (rowsCleared > 0) {\r\n      setScore(\r\n        previousState =>\r\n          previousState + linePoints[rowsCleared - 1] * (level + 1)\r\n      );\r\n      setRows(previousState => previousState + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calculateScore();\r\n  }, [calculateScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import Tetris from './components/Tetris';\n\nconst App = () => {\n  return <Tetris />;\n};\n\nexport default App;\n","import './index.css';\n\nimport App from './App';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}